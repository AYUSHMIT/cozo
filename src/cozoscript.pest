script = _{SOI ~ (option | rule | const_rule)+ ~ EOI}
schema_script = _{SOI ~ schema_clause+ ~ EOI}
tx_script = _{SOI ~ tx_clause+ ~ EOI}

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
BLOCK_COMMENT = _{ "/*" ~ (BLOCK_COMMENT | !"*/" ~ ANY)* ~ "*/" }
LINE_COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
COMMENT = _{(BLOCK_COMMENT | LINE_COMMENT)}

prog_entry = {"?"}
var = @{"?" ~ (XID_CONTINUE | "_")*}
param = @{"$" ~ (XID_CONTINUE | "_")*}
ident = @{XID_START ~ ("_" | XID_CONTINUE)*}
compound_ident = {ident ~ ("." ~ ident)?}

rule = {rule_head ~ ("@" ~ expr)? ~ ":=" ~ rule_body ~ ";"}
const_rule = {ident ~ "<-" ~ expr ~ ";" }

rule_head = {(prog_entry | ident) ~ "[" ~ (head_arg ~ ",")* ~ head_arg? ~ "]"}
head_arg = {aggr_arg | var}
aggr_arg = {ident ~ "(" ~ var ~ ("," ~ expr)* ~ ")"}

rule_body = {(disjunction ~ ",")* ~ disjunction?}
rule_apply = {ident ~ "[" ~ apply_args ~ "]"}


disjunction = {(atom ~ "or" )* ~ atom}
atom = _{grouped | triple | negation | rule_apply | unify | expr }
unify = {var ~ "is" ~ expr}
negation = {"not" ~ atom}
triple = { "[" ~ (expr | triple_pull) ~ compound_ident ~ (expr | triple_pull) ~ "]"}
triple_pull = {compound_ident ~ "[" ~ expr ~ "]"}
apply = {ident ~ "(" ~ apply_args ~ ")"}
apply_args = {(expr ~ ",")* ~ expr?}
grouped = {"(" ~ rule_body ~ ")"}

expr = {unary ~ (operation ~ unary)*}
operation = _{ (op_and | op_or | op_pow | op_str_cat | op_add | op_sub | op_mul | op_div | op_mod |
                op_ge | op_le | op_gt | op_lt | op_eq | op_ne)}
op_or = { "||" }
op_and = { "&&" }
op_str_cat = { "++" }
op_add = { "+" }
op_sub = { "-" }
op_mul = { "*" }
op_div = { "/" }
op_mod = { "%" }
op_eq = { "=="| "=" }
op_ne = { "!=" }
op_gt = { ">" }
op_lt = { "<" }
op_ge = { ">=" }
op_le = { "<=" }
op_pow = { "^" }
unary = { (unary_op ~ unary) | term }
unary_op = _{ minus | negate }
minus = { "-" }
negate = { "!" }

term = _{ var | param | grouping | apply | list | literal }
list = { "[" ~ (expr ~ ",")* ~ expr? ~ "]" }
grouping = { "(" ~ expr ~ ")" }

option = _{(limit_option|offset_option|out_option|sort_option)~";"}
limit_option = {":limit"  ~ pos_int}
offset_option = {":offset" ~ pos_int}
out_option = {":out" ~ out_spec}
sort_option = {(":sort" | ":order") ~ (sort_arg ~ ",")* ~ sort_arg }
sort_arg = { sort_dir? ~ var }
sort_dir = _{ sort_asc | sort_desc }
sort_asc = {"+"}
sort_desc = {"-"}

pull_ident = @{"<"? ~ compound_ident}
out_spec = _{out_map_spec | out_list_spec}
out_map_spec = {"{" ~ (out_map_pair ~ ",")* ~ out_map_pair? ~ "}"}
out_map_pair = {compound_ident ~ ":" ~ pull_spec}
out_list_spec = {"[" ~ (pull_spec ~ ",")* ~ pull_spec? ~ "]"}
pull_spec = {var ~ pull_args?}
pull_args = {("[" ~ (pull_arg ~ ",")* ~ pull_arg? ~ "]")?}
pull_arg = {( pull_all | pull_id | pull_attr ) ~ pull_modifier*}
pull_attr = {pull_ident ~ pull_args?}
pull_all = {"*"}
pull_id = {"_id"}
pull_modifier = _{pull_as | pull_limit | pull_offset | pull_default | pull_recurse | pull_depth}
pull_as = {"as" ~ compound_ident}
pull_limit = {"limit" ~ pos_int}
pull_offset = {"offset" ~ pos_int}
pull_default = {"default" ~ expr}
pull_recurse = {"recurse" ~ expr}
pull_depth = {"depth" ~ pos_int}

// literals

quoted_string = ${ "\"" ~ quoted_string_inner ~ "\"" }
quoted_string_inner = { char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
s_quoted_string = ${ "\'" ~ s_quoted_string_inner ~ "\'" }
s_quoted_string_inner = { s_char* }
s_char = {
    !("\'" | "\\") ~ ANY
    | "\\" ~ ("\'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
raw_string = {
    "r" ~ PUSH("#"*) ~ "\""    // push the number signs onto the stack
    ~ raw_string_inner
    ~ "\"" ~ POP               // match a quotation mark and the number signs
}
raw_string_inner = {
    (
        !("\"" ~ PEEK)    // unless the next character is a quotation mark
                          // followed by the correct amount of number signs,
        ~ ANY             // consume one character
    )*
}
string = _{(raw_string | s_quoted_string | quoted_string)}
// Boolean and null
boolean = { "true" | "false" }
null = { "null" }
// Numbers
pos_int = @{ASCII_DIGIT ~ ("_" | ASCII_DIGIT)*}
hex_pos_int = @{"0x" ~ ASCII_HEX_DIGIT ~ ("_" | ASCII_HEX_DIGIT)*}
octo_pos_int = @{"0o" ~ ASCII_OCT_DIGIT ~ ("_" | ASCII_OCT_DIGIT)*}
bin_pos_int = @{"0b" ~ ASCII_BIN_DIGIT ~ ("_" | ASCII_BIN_DIGIT)*}
int = _{(hex_pos_int | octo_pos_int | bin_pos_int | pos_int)}
dot_float = @{
    ("0" | ASCII_NONZERO_DIGIT ~ ("_" | ASCII_DIGIT)*)
    ~ ("." ~ ("_" | ASCII_DIGIT)+)
}
sci_float = @{
    ("0" | ASCII_NONZERO_DIGIT ~ ("_" | ASCII_DIGIT)*)
    ~ ("." ~ ("_" | ASCII_DIGIT)+)?
    ~ (^"e" ~ ("+" | "-")? ~ ("_" | ASCII_DIGIT)+)
}
float = _{(sci_float | dot_float)}
number = _{(float | int)}
literal = _{ null | boolean | number | string}


// schema

schema_clause = { (schema_put | schema_retract) ~ compound_ident ~ (simple_schema_def | nested_schema_def) }
schema_put = {"put"}
schema_retract = {"retract"}
simple_schema_def = {":" ~ ident+ ~ ";"}
nested_schema_def = {"{" ~ (nested_schema_clause ~ ",")* ~ nested_schema_clause? ~ "}" ~ ";"?}
nested_schema_clause = {compound_ident ~ ":" ~ ident+}

// tx

tx_clause = { (tx_put | tx_retract )? ~ tx_map ~ ";"? }
tx_put = {"put"}
tx_retract = {"retract"}
tx_map = {"{" ~ (tx_pair ~ ",")* ~ tx_pair? ~ "}"}
tx_pair = {tx_ident ~ ":" ~ tx_el}
tx_list = {"[" ~ (tx_el ~ ",")* ~ tx_el? ~ "]"}
tx_el = _{ tx_map | tx_list | neg_num | expr }
neg_num = {"-" ~ number}
tx_ident = _{ tx_special_ident | compound_ident | string}
tx_special_ident = {"_id" | "_temp_id"}