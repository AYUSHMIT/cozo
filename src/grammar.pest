file = _{SOI ~ statement* ~ EOI}

// whitespace

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
BLOCK_COMMENT = _{ "/*" ~ (BLOCK_COMMENT | !"*/" ~ ANY)* ~ "*/" }
LINE_COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
COMMENT = _{(BLOCK_COMMENT | LINE_COMMENT)}


// identifiers

ident = @{("_" | XID_START) ~ ("_" | XID_CONTINUE)*}
param = @{"$" ~ ("_" | XID_CONTINUE)+}


// literals

quoted_string = ${ "\"" ~ quoted_string_inner ~ "\"" }
quoted_string_inner = { char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}


s_quoted_string = ${ "\'" ~ s_quoted_string_inner ~ "\'" }
s_quoted_string_inner = { s_char* }
s_char = {
    !("\'" | "\\") ~ ANY
    | "\\" ~ ("\'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
raw_string = {
    "r" ~ PUSH("#"*) ~ "\""    // push the number signs onto the stack
    ~ raw_string_inner
    ~ "\"" ~ POP               // match a quotation mark and the number signs
}
raw_string_inner = {
    (
        !("\"" ~ PEEK)    // unless the next character is a quotation mark
                          // followed by the correct amount of number signs,
        ~ ANY             // consume one character
    )*
}

string = _{(raw_string | s_quoted_string | quoted_string)}

// Boolean and null

boolean = { "true" | "false" }

null = { "null" }

// Numbers

pos_int = @{ASCII_DIGIT ~ ("_" | ASCII_DIGIT)*}
hex_pos_int = @{"0x" ~ ASCII_HEX_DIGIT ~ ("_" | ASCII_HEX_DIGIT)*}
octo_pos_int = @{"0o" ~ ASCII_OCT_DIGIT ~ ("_" | ASCII_OCT_DIGIT)*}
bin_pos_int = @{"0b" ~ ASCII_BIN_DIGIT ~ ("_" | ASCII_BIN_DIGIT)*}
int = _{(hex_pos_int | octo_pos_int | bin_pos_int | pos_int)}

dot_float = @{
    ("0" | ASCII_NONZERO_DIGIT ~ ("_" | ASCII_DIGIT)*)
    ~ ("." ~ ("_" | ASCII_DIGIT)+)
}

sci_float = @{
    ("0" | ASCII_NONZERO_DIGIT ~ ("_" | ASCII_DIGIT)*)
    ~ ("." ~ ("_" | ASCII_DIGIT)+)?
    ~ (^"e" ~ ("+" | "-")? ~ ("_" | ASCII_DIGIT)+)
}

float = _{(sci_float | dot_float)}
number = _{(float | int)}

literal = _{ null | boolean | number | string}

// date, time, datetime, duration: no literal, do with functions. User passed in stuff can be coerced from string
// but they do exist at the AST level (and of course at the value level)

// expressions

comma_sep_expr = { expr ~ ("," ~ expr)* }
expr = {(unary | term) ~ (operation ~ (unary | term)) *}
operation = _{ (op_and | op_or | op_pow | op_add | op_sub | op_mul | op_div | op_mod | op_coalesce |
                op_ge | op_le | op_gt | op_lt | op_eq | op_ne)}
op_or = { "||" }
op_and = { "&&" }
op_add = { "+" }
op_sub = { "-" }
op_mul = { "*" }
op_div = { "/" }
op_mod = { "%" }
op_coalesce = { "~" }
op_eq = { "==" }
op_ne = { "!=" }
op_gt = { ">" }
op_lt = { "<" }
op_ge = { ">=" }
op_le = { "<=" }
op_pow = { "^" }

unary = { unary_op ~ term }
unary_op = _{ minus | negate }
minus = { "-" }
negate = { "!" }

term = { (grouping | literal | ident | param | list | dict) ~ (call | accessor | index_accessor)* }
call = {"." ~ ident ~ "(" ~ argument* ~ ")"}
accessor = {"." ~ ident}
index_accessor = {"[" ~ expr ~ "]"}
argument = _{(kw_arg | pos_arg)}
kw_arg = {ident ~ "=" ~ expr}
pos_arg = { expr }
grouping = { "(" ~ expr ~ ")" }

list = { "[" ~ (list_el ~ ",")* ~ list_el? ~ "]" }
list_el = _{spreading | expr}
spreading = {"..." ~ term}

dict = { "{" ~ (dict_entry ~ ",")* ~ dict_entry? ~ "}"}
dict_entry = _{ spreading | dict_accessor | dict_pair }
dict_accessor = { ident? ~ ("." ~ ident)+ }
dict_pair = {(ident | string) ~ ":" ~ expr}

scoped_dict = { ident ~ dict }

name_in_def = {(ident | string)}
col_entry = { col_name ~ ":" ~ typing ~ ("=" ~ expr)? }

col_name = { key_marker? ~ name_in_def }
key_marker = { "*" }

typing = { nullable_marker? ~ (simple_type | tuple_type | list_type ) }
nullable_marker = {"?"}
simple_type = {ident}
tuple_type = {"("~ (typing ~ ",")+ ~")"}
list_type = {"[" ~ typing ~ "]"}

cols_def = { "{" ~ col_entry ~ ("," ~ col_entry)* ~ ","? ~ "}" }

col_list = {"(" ~ name_in_def ~ ("," ~ name_in_def)* ~ ","? ~ ")"}

node_def = { "node" ~ name_in_def ~ cols_def }
columns_def = { "columns" ~ name_in_def ~ ":" ~ name_in_def ~ cols_def }
edge_def = { "edge" ~
             "[" ~ name_in_def ~ "]" ~ "-" ~ "(" ~ name_in_def ~ ")" ~ "->" ~ "[" ~ name_in_def ~ "]"
             ~ cols_def? }
index_def = { "index" ~ (name_in_def ~ ":")? ~ name_in_def ~ col_list }
struct_def = { "struct" ~ name_in_def ~ cols_def }

definition = _{ node_def | columns_def | edge_def | struct_def | index_def }
global_def = { "create" ~ definition }
local_def = { "local" ~ definition }
statement = _{ global_def | local_def }